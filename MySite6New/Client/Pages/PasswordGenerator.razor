@page "/passwordgen"
@inject HttpClient Http
@inject IJSRuntime JSRuntime

@using MySite6New.Shared

<PageTitle>Pwd Gen</PageTitle>

<div class="row col-12">
    <h3 class="mytitle" style="color:#ff6493;">Password generator</h3>
</div>
<div class="row col-12">
    <div class="container col-4 float-start" style="color:aliceblue;">
        <EditForm Model="PwdData" OnSubmit="GeneraPassword">
    
                <div class="mb-3 form-control">
                    <label class="form-label" for="lunghezza">Lunghezza password (min. 8 caratteri)&nbsp;</label>
                    <InputNumber @bind-Value="PwdData.Lunghezza" class="col-2" id="lunghezza"></InputNumber>
                </div>
                <div class="mb-3 form-control">
                    <label class="form-label" for="quantita">Passwords da generare &nbsp;</label>
                    <InputNumber @bind-Value="PwdData.Quantita" min="1" class="col-2" id="quantita"></InputNumber>
                </div>

                <div class="mb-3 form-check">
                    <InputCheckbox @bind-Value="PwdData.UsaMaiuscole" class="form-check-input" id="checkMaiuscole"/>
                    <label class="form-check-label" for="checkMaiuscole">Usa maiuscole</label>
                </div>
                <div class="mb-3 form-check">
                    <InputCheckbox @bind-Value="PwdData.UsaMinuscole" class="form-check-input" id="checkMinuscole"/>
                    <label class="form-check-label" for="checkMinuscole">Usa minuscole</label>
                </div>
                <div class="mb-3 form-check">
                    <InputCheckbox @bind-Value="PwdData.UsaNumeri" class="form-check-input" id="checkNumeri"/>
                    <label class="form-check-label" for="checkNumeri">Usa numeri</label>
                </div>
                <div class="mb-3 form-check">
                    <InputCheckbox @bind-Value="PwdData.UsaSpeciali" class="form-check-input" id="checkSpeciali"/>
                    <label class="form-check-label" for="checkSpeciali">Usa caratteri speciali (@speciali)</label>
                </div>
                <input type="submit" class="btn btn-primary float-end" value="Genera" />
        </EditForm>
    </div>
    <div class="container col-8 float-end align-items-center" style="color:aliceblue;">
        
            @if (listaPwd != null && listaPwd.Count() > 0)
            {
                <ul class="list-group w-100">
                    @foreach (var item in listaPwd)
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <span>@item</span>
                            <CopyButton TextToCopy="@item" />
                        </li>
                    }
                </ul>
            }
    </div>
</div>

@code {
    PasswordModel PwdData = new PasswordModel();
    private const string speciali = @"!#$%&*@\";

    private string pwdGenerata = string.Empty;
    private List<string>? listaPwd = new List<string>();

    protected override void OnInitialized()
    {
        PwdData.UsaMaiuscole = true;
        PwdData.UsaMinuscole = true;
        PwdData.UsaNumeri = true;
        PwdData.UsaSpeciali = false;
        PwdData.Lunghezza = 8;
        PwdData.Quantita = 1;

    }

    private async Task GeneraPassword()
    {
        // /Custom1?lunghezza=8&includeLowercase=true&includeUppercase=true&includeNumeric=true&includeSpecial=true
        // Custom2/5?lunghezza=8&includeLowercase=true&includeUppercase=true&includeNumeric=true&includeSpecial=false
        string url = string.Empty;
        if(PwdData.Quantita==1)
        {
            url = $"Custom1?lunghezza={PwdData.Lunghezza}" +
                $"&usaMinuscole={(PwdData.UsaMinuscole?"true":"false")}" +
                $"&usaMaiuscole={(PwdData.UsaMaiuscole?"true":"false")}" + 
                $"&usaNumeri={(PwdData.UsaNumeri?"true":"false")}" + 
                $"&usaSpeciali={(PwdData.UsaSpeciali?"true":"false")}";
            pwdGenerata = await Http.GetStringAsync($"api/passgen/{url}");
            listaPwd!.Clear();
            listaPwd.Add(pwdGenerata);
        }
        else
        {
            url = $"Custom2/{PwdData.Quantita}?lunghezza={PwdData.Lunghezza}" +
                $"&usaMinuscole={(PwdData.UsaMinuscole?"true":"false")}" +
                $"&usaMaiuscole={(PwdData.UsaMaiuscole?"true":"false")}" + 
                $"&usaNumeri={(PwdData.UsaNumeri?"true":"false")}" + 
                $"&usaSpeciali={(PwdData.UsaSpeciali?"true":"false")}";
            listaPwd = await Http.GetFromJsonAsync<List<string>>($"api/passgen/{url}");
            pwdGenerata = string.Empty;
        }
    }

    private async Task CopyTextToClipboard(string password)
    {
        await JSRuntime.InvokeVoidAsync("clipboardCopy.copyText", password);
    }

}
